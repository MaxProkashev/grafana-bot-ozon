# Code generated by scratch version v1.6.4. DO NOT EDIT.
# You can extend or override anything in ./Makefile

# DEPRECATED: Use PROJECT_STRUCTURE_*_CLIENT instead
PROJECT_STRUCTURE_CLIENTS=pkg

# DEPRECATED: Use PROJECT_STRUCTURE_*_IMPLEMENTATION instead
PROJECT_STRUCTURE_IMPLEMENTATIONS=internal/app

# IMPLEMENTATION_TYPE_NAME sets go template for generating name of implementation structure
# it can contain {{ .ServiceName }} variable, for ex.: "{{ .ServiceName }}Implementation"
IMPLEMENTATION_TYPE_NAME="Implementation"

export GOPROXY=https://athens.s.o3.ru
export GOSUMDB=off

GOPATH?=$(HOME)/go
FIRST_GOPATH:=$(firstword $(subst :, ,$(GOPATH)))
GIT_TAG:=$(shell git describe --exact-match --abbrev=0 --tags 2> /dev/null)
GIT_HASH:=$(shell git log --format="%h" -n 1 2> /dev/null)
GIT_LOG:=$(shell git log --decorate --oneline -n1 2> /dev/null | base64 | tr -d '\n')
GIT_BRANCH:=$(shell git branch 2> /dev/null | grep '*' | cut -f2 -d' ')
GO_VERSION:=$(shell go version)
GO_VERSION_SHORT:=$(shell echo $(GO_VERSION)|sed -E 's/.* go(.*) .*/\1/g')
BUILD_TS:=$(shell date +%FT%T%z)

# App version is sanitized CI branch name, if available.
# Otherwise git branch or commit hash is used.
APP_VERSION:=$(if $(CI_COMMIT_REF_SLUG),$(CI_COMMIT_REF_SLUG),$(if $(GIT_BRANCH),$(GIT_BRANCH),$(GIT_HASH)))

# CI_PROJECT_ID is set in Gitlab CI, but we will fallback to app name if not present
CI_PROJECT_ID?=grafana-bot
LDFLAGS:=-X 'gitlab.ozon.ru/platform/scratch/internal/app.Name=grafana-bot'\
         -X 'gitlab.ozon.ru/platform/scratch/internal/app.ProjectID=$(CI_PROJECT_ID)'\
         -X 'gitlab.ozon.ru/platform/scratch/internal/app.Version=$(APP_VERSION)'\
         -X 'gitlab.ozon.ru/platform/scratch/internal/app.GoVersion=$(GO_VERSION_SHORT)'\
         -X 'gitlab.ozon.ru/platform/scratch/internal/app.BuildDate=$(BUILD_TS)'\
         -X 'gitlab.ozon.ru/platform/scratch/internal/app.GitLog=$(GIT_LOG)'\
         -X 'gitlab.ozon.ru/platform/scratch/internal/app.GitHash=$(GIT_HASH)'\
         -X 'gitlab.ozon.ru/platform/scratch/internal/app.GitBranch=$(GIT_BRANCH)'\
         -X 'gitlab.ozon.ru/platform/scratch/internal/app.publicPortDefault='\
         -X 'gitlab.ozon.ru/platform/scratch/internal/app.adminPortDefault='\
         -X 'gitlab.ozon.ru/platform/scratch/internal/app.grpcPortDefault='

BUILD_ENVPARMS:=CGO_ENABLED=0

BIN?=./bin/grafana-bot

GOBIN:=$(FIRST_GOPATH)/bin
LOCAL_BIN:=$(CURDIR)/bin

# Check global GOLANGCI-LINT
GOLANGCI_BIN:=$(LOCAL_BIN)/golangci-lint
GOLANGCI_TAG:=1.17.1

# Check local bin version
ifneq ($(wildcard $(GOLANGCI_BIN)),)
GOLANGCI_BIN_VERSION:=$(shell $(GOLANGCI_BIN) --version)
ifneq ($(GOLANGCI_BIN_VERSION),)
GOLANGCI_BIN_VERSION_SHORT:=$(shell echo "$(GOLANGCI_BIN_VERSION)"|sed -E 's/.* version (.*) built from .* on .*/\1/g')
else
GOLANGCI_BIN_VERSION_SHORT:=0
endif
ifneq "$(GOLANGCI_TAG)" "$(word 1, $(sort $(GOLANGCI_TAG) $(GOLANGCI_BIN_VERSION_SHORT)))"
GOLANGCI_BIN:=
endif
endif

# Check global bin version
ifneq (, $(shell which golangci-lint))
GOLANGCI_VERSION:=$(shell golangci-lint --version 2> /dev/null )
ifneq ($(GOLANGCI_VERSION),)
GOLANGCI_VERSION_SHORT:=$(shell echo "$(GOLANGCI_VERSION)"|sed -E 's/.* version (.*) built from .* on .*/\1/g')
else
GOLANGCI_VERSION_SHORT:=0
endif
ifeq "$(GOLANGCI_TAG)" "$(word 1, $(sort $(GOLANGCI_TAG) $(GOLANGCI_VERSION_SHORT)))"
GOLANGCI_BIN:=$(shell which golangci-lint)
endif
endif

# We always use go in module mode
export GO111MODULE=on

# We always use go 1.12.12+
ifneq ("1.12.12","$(shell printf "$(GO_VERSION_SHORT)\n1.12.12" | sort -V | head -1)")
$(info You could run "scratch install go -v" to help you!)
$(error NEED GO VERSION >= 1.12.12. Found: $(GO_VERSION_SHORT))
endif

SCRATCH_VERSION:=v1.6.4
SCRATCH_BIN:=$(LOCAL_BIN)/scratch

PKGMAP:=Mgoogle/protobuf/any.proto=github.com/gogo/protobuf/types,$\
        Mgoogle/protobuf/api.proto=github.com/gogo/protobuf/types,$\
        Mgoogle/protobuf/descriptor.proto=github.com/gogo/protobuf/protoc-gen-gogo/descriptor,$\
        Mgoogle/protobuf/duration.proto=github.com/gogo/protobuf/types,$\
        Mgoogle/protobuf/empty.proto=github.com/gogo/protobuf/types,$\
        Mgoogle/protobuf/field_mask.proto=github.com/gogo/protobuf/types,$\
        Mgoogle/protobuf/source_context.proto=github.com/gogo/protobuf/types,$\
        Mgoogle/protobuf/struct.proto=github.com/gogo/protobuf/types,$\
        Mgoogle/protobuf/timestamp.proto=github.com/gogo/protobuf/types,$\
        Mgoogle/protobuf/type.proto=github.com/gogo/protobuf/types,$\
        Mgoogle/protobuf/wrappers.proto=github.com/gogo/protobuf/types

# default scratch target: test and build
.PHONY: all
all: test build

.PHONY: .get-scratch
.get-scratch:
	@[ -f go.mod ] || go mod init grafana-bot

	go get gitlab.ozon.ru/platform/scratch@latest

# download latest scratch and init go.mod if not found
.PHONY: get-scratch
get-scratch: .get-scratch

# install scratch tool
.PHONY: .install-scratch
.install-scratch:
	$(info #Install scratch)
	tmp=$$(mktemp -d) && cd $$tmp && pwd && go mod init temp && go get -d gitlab.ozon.ru/platform/scratch/cmd/scratch@v1.0.0 && \
		go build -o $(SCRATCH_BIN) gitlab.ozon.ru/platform/scratch/cmd/scratch && \
		rm -rf $$tmp
	$(SCRATCH_BIN) upgrade --version $(SCRATCH_VERSION)

# upgrade scratch tool or install if it doesn't exist
.PHONY: install-scratch
install-scratch:
ifeq ($(wildcard $(SCRATCH_BIN)),)
	$(MAKE) .install-scratch
else
	$(info #Upgrade scratch to $(SCRATCH_VERSION)...)
	$(SCRATCH_BIN) upgrade --version $(SCRATCH_VERSION) || $(MAKE) .install-scratch
endif

# install golangci-lint binary
.PHONY: install-lint
install-lint:
ifeq ($(wildcard $(GOLANGCI_BIN)),)
	$(info #Downloading golangci-lint v$(GOLANGCI_TAG))
	tmp=$$(mktemp -d) && cd $$tmp && pwd && go mod init temp && go get -d github.com/golangci/golangci-lint@v$(GOLANGCI_TAG) && \
		go build -ldflags "-X 'main.version=$(GOLANGCI_TAG)' -X 'main.commit=test' -X 'main.date=test'" -o $(LOCAL_BIN)/golangci-lint github.com/golangci/golangci-lint/cmd/golangci-lint && \
		rm -rf $$tmp
GOLANGCI_BIN:=$(LOCAL_BIN)/golangci-lint
endif

# run diff lint like in pipeline
.PHONY: .lint
.lint: install-lint
	$(info #Running lint...)
	$(GOLANGCI_BIN) run --new-from-rev=origin/master --config=.golangci.pipeline.yaml ./...

# golangci-lint diff master
.PHONY: lint
lint: .lint

# run full lint like in pipeline
.PHONY: .lint-full
.lint-full: install-lint
	$(GOLANGCI_BIN) run --config=.golangci.pipeline.yaml ./...

# golangci-lint full
.PHONY: lint-full
lint-full: .lint-full

.PHONY: .bin-deps
.bin-deps:
	$(info #Installing binary dependencies...)
	GOBIN=$(LOCAL_BIN) go install github.com/gogo/protobuf/protoc-gen-gofast
	GOBIN=$(LOCAL_BIN) go install github.com/utrack/clay/v2/cmd/protoc-gen-goclay

# install binary dependencies needed for code generation
.PHONY: bin-deps
bin-deps: .bin-deps

.PHONY: .deps
.deps:
	$(info #Install dependencies...)
	go mod download

# install project dependencies
.PHONY: deps
deps: .deps

.PHONY: .deps-pb
.deps-pb: install-scratch
	$(info #Install proto dependencies...)
	rm -rf vendor.pb

# install proto dependencies
.PHONY: deps-pb
deps-pb: .deps-pb

.PHONY: .test
.test:
	$(info #Running tests...)
	go test ./...

# run unit tests
.PHONY: test
test: .test

.PHONY: .build
.build:
	$(info #Building...)
	$(BUILD_ENVPARMS) go build -ldflags "$(LDFLAGS)" -o $(BIN) ./cmd/grafana-bot

# build app
.PHONY: build
build: .build

.PHONY: .run
.run:
	$(info #Running...)
	$(BUILD_ENVPARMS) go run -ldflags "$(LDFLAGS)" ./cmd/grafana-bot --local-config-enabled

# run app
.PHONY: run
run: .run

.PHONY: generate-config
generate-config: install-scratch
	$(SCRATCH_BIN) generate config -v

.PHONY: .generate
.generate:

# generate code from proto and config
.PHONY: generate
generate: bin-deps deps-pb .generate generate-config

# generate code from proto but without downloading proto deps
.PHONY: fast-generate
fast-generate: .generate
